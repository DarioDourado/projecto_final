"""Dashboard Streamlit - An√°lise e Previs√£o Salarial (Vers√£o H√≠brida Multi-Tabs)"""

import streamlit as st
import sys
import os
from pathlib import Path
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent / "src"))

# Configurar p√°gina
st.set_page_config(
    page_title="Dashboard - An√°lise Salarial",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√£o de estilo moderno
def setup_dashboard_style():
    """Configurar estilo moderno do dashboard"""
    st.markdown("""
    <style>
    /* Header principal */
    .main-header {
        font-size: 3rem;
        color: #2E86AB;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Cards de m√©tricas */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
    }
    
    /* Sidebar */
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Bot√µes */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    
    /* Tabs customizadas */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 60px;
        padding: 10px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
        border: 2px solid transparent;
        font-weight: bold;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-color: #495057;
    }
    
    /* Inputs */
    .stSelectbox > div > div > select {
        background-color: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 0.5rem;
    }
    
    .stNumberInput > div > div > input {
        background-color: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
    }
    
    /* Cards informativos */
    .info-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        border-left: 5px solid #667eea;
        margin: 1rem 0;
    }
    
    /* Alertas personalizados */
    .success-alert {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .warning-alert {
        background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .error-alert {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

# Cache para dados
@st.cache_data
def load_processed_data():
    """Carregar dados processados de data/processed/"""
    try:
        # Tentar carregar de data/processed/ primeiro
        processed_file = Path("data/processed/data_processed.csv")
        if processed_file.exists():
            return pd.read_csv(processed_file)
        
        # Fallback para arquivo original
        original_file = Path("data/raw/4-Carateristicas_salario.csv")
        if original_file.exists():
            return pd.read_csv(original_file)
        
        return None
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None

@st.cache_resource
def load_model_artifacts():
    """Carregar modelo e preprocessador de data/processed/"""
    try:
        artifacts = {}
        data_processed_dir = Path("data/processed")
        
        # Tentar carregar modelo principal
        model_path = data_processed_dir / "random_forest_model.joblib"
        if model_path.exists():
            artifacts['model'] = joblib.load(model_path)
        
        # Tentar carregar preprocessador
        preprocessor_path = data_processed_dir / "preprocessor.joblib"
        if preprocessor_path.exists():
            artifacts['preprocessor'] = joblib.load(preprocessor_path)
        
        # Tentar carregar info das features
        feature_info_path = data_processed_dir / "feature_info.joblib"
        if feature_info_path.exists():
            artifacts['feature_info'] = joblib.load(feature_info_path)
        
        return artifacts
    except Exception as e:
        st.error(f"Erro ao carregar artefatos do modelo: {e}")
        return {}

def show_overview_tab(df):
    """Tab de Vis√£o Geral com m√©tricas e resumo dos dados"""
    st.markdown("### üéØ Dashboard de An√°lise Salarial")
    st.markdown("---")
    
    # Status do sistema
    col1, col2, col3 = st.columns(3)
    
    with col1:
        artifacts = load_model_artifacts()
        if artifacts:
            st.markdown("""
            <div class="success-alert">
                <h4>‚úÖ Sistema Operacional</h4>
                <p>Modelos carregados e prontos para uso</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="warning-alert">
                <h4>‚ö†Ô∏è Modelos N√£o Encontrados</h4>
                <p>Execute: python main.py</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        images_dir = Path("output/images")
        if images_dir.exists() and list(images_dir.glob("*.png")):
            st.markdown("""
            <div class="success-alert">
                <h4>üìà Visualiza√ß√µes OK</h4>
                <p>Gr√°ficos dispon√≠veis</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="warning-alert">
                <h4>üìä Sem Visualiza√ß√µes</h4>
                <p>Gere com main.py</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col3:
        processed_file = Path("data/processed/data_processed.csv")
        if processed_file.exists():
            st.markdown("""
            <div class="success-alert">
                <h4>üíæ Dados Processados</h4>
                <p>Dataset pronto</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="error-alert">
                <h4>‚ùå Dados em Falta</h4>
                <p>Processe com main.py</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # M√©tricas principais do dataset
    st.subheader("üìä M√©tricas do Dataset")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total de Registros", f"{len(df):,}")
    
    with col2:
        st.metric("üî¢ Colunas", len(df.columns))
    
    with col3:
        missing_percentage = (df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100
        st.metric("‚ùì Dados Ausentes", f"{missing_percentage:.1f}%")
    
    with col4:
        memory_mb = df.memory_usage(deep=True).sum() / 1024 / 1024
        st.metric("üíæ Mem√≥ria", f"{memory_mb:.1f} MB")
    
    with col5:
        if 'salary' in df.columns:
            high_salary_pct = (df['salary'] == '>50K').mean() * 100
            st.metric("üí∞ Sal√°rio >50K", f"{high_salary_pct:.1f}%")
    
    # Resumo r√°pido dos dados
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Amostra dos Dados")
        st.dataframe(df.head(8), use_container_width=True)
    
    with col2:
        st.subheader("üìä Resumo das Colunas")
        info_df = pd.DataFrame({
            'Coluna': df.columns,
            'Tipo': df.dtypes.astype(str),
            'N√£o Nulos': df.count(),
            '% Nulos': (df.isnull().sum() / len(df) * 100).round(2)
        })
        st.dataframe(info_df, use_container_width=True)

def show_data_analysis_tab(df):
    """Tab de An√°lise Detalhada dos Dados"""
    st.subheader("üîç An√°lise Detalhada dos Dados")
    
    # An√°lise por tipo de dados
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    
    tab1, tab2, tab3 = st.tabs(["üìä Vari√°veis Num√©ricas", "üìù Vari√°veis Categ√≥ricas", "üéØ An√°lise Target"])
    
    with tab1:
        if numeric_cols:
            st.write("**Estat√≠sticas Descritivas das Vari√°veis Num√©ricas:**")
            st.dataframe(df[numeric_cols].describe(), use_container_width=True)
            
            # Sele√ß√£o de vari√°vel para an√°lise detalhada
            selected_numeric = st.selectbox("Selecione uma vari√°vel num√©rica para an√°lise:", numeric_cols)
            
            if selected_numeric:
                col1, col2 = st.columns(2)
                
                with col1:
                    fig, ax = plt.subplots(figsize=(8, 6))
                    df[selected_numeric].hist(bins=30, ax=ax, color='#667eea', alpha=0.7)
                    ax.set_title(f'Distribui√ß√£o de {selected_numeric}')
                    ax.set_xlabel(selected_numeric)
                    ax.set_ylabel('Frequ√™ncia')
                    st.pyplot(fig)
                
                with col2:
                    st.write(f"**Estat√≠sticas de {selected_numeric}:**")
                    stats = df[selected_numeric].describe()
                    for stat, value in stats.items():
                        st.metric(stat.title(), f"{value:.2f}" if isinstance(value, float) else str(value))
        else:
            st.info("Nenhuma vari√°vel num√©rica encontrada.")
    
    with tab2:
        if categorical_cols:
            st.write("**Resumo das Vari√°veis Categ√≥ricas:**")
            
            cat_summary = []
            for col in categorical_cols:
                unique_count = df[col].nunique()
                most_frequent = df[col].mode().iloc[0] if not df[col].mode().empty else "N/A"
                cat_summary.append({
                    'Vari√°vel': col,
                    'Valores √önicos': unique_count,
                    'Mais Frequente': most_frequent
                })
            
            cat_df = pd.DataFrame(cat_summary)
            st.dataframe(cat_df, use_container_width=True)
            
            # An√°lise detalhada de vari√°vel categ√≥rica
            selected_cat = st.selectbox("Selecione uma vari√°vel categ√≥rica para an√°lise:", categorical_cols)
            
            if selected_cat:
                col1, col2 = st.columns(2)
                
                with col1:
                    value_counts = df[selected_cat].value_counts()
                    st.write(f"**Contagem de valores em {selected_cat}:**")
                    st.dataframe(value_counts, use_container_width=True)
                
                with col2:
                    fig, ax = plt.subplots(figsize=(8, 6))
                    value_counts.plot(kind='bar', ax=ax, color='#764ba2')
                    ax.set_title(f'Distribui√ß√£o de {selected_cat}')
                    ax.set_xlabel(selected_cat)
                    ax.set_ylabel('Contagem')
                    plt.xticks(rotation=45)
                    st.pyplot(fig)
        else:
            st.info("Nenhuma vari√°vel categ√≥rica encontrada.")
    
    with tab3:
        if 'salary' in df.columns:
            st.write("**An√°lise da Vari√°vel Target (Salary):**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                salary_counts = df['salary'].value_counts()
                st.write("**Distribui√ß√£o de Sal√°rios:**")
                st.dataframe(salary_counts, use_container_width=True)
                
                # Percentuais
                salary_pct = df['salary'].value_counts(normalize=True) * 100
                st.write("**Percentuais:**")
                for salary, pct in salary_pct.items():
                    st.write(f"- {salary}: {pct:.1f}%")
            
            with col2:
                fig, ax = plt.subplots(figsize=(8, 6))
                colors = ['#28a745', '#dc3545']
                wedges, texts, autotexts = ax.pie(salary_counts.values, 
                                                 labels=salary_counts.index,
                                                 autopct='%1.1f%%',
                                                 colors=colors,
                                                 explode=(0.05, 0.05),
                                                 shadow=True,
                                                 startangle=90)
                ax.set_title('Distribui√ß√£o de Sal√°rios')
                st.pyplot(fig)
        else:
            st.info("Vari√°vel target 'salary' n√£o encontrada.")

def show_visualizations_tab():
    """Tab de Visualiza√ß√µes"""
    st.subheader("üìà Galeria de Visualiza√ß√µes")
    
    # Verificar diret√≥rios de imagens
    image_dirs = [
        Path("output/images"),
        Path("imagens"),
        Path("images")
    ]
    
    image_files = []
    images_dir = None
    
    for img_dir in image_dirs:
        if img_dir.exists():
            images_dir = img_dir
            image_files = list(img_dir.glob("*.png"))
            break
    
    if not image_files:
        st.warning("‚ö†Ô∏è Nenhuma visualiza√ß√£o encontrada!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("üí° Execute primeiro: `python main.py` para gerar as visualiza√ß√µes")
        
        with col2:
            if st.button("üîÑ Gerar Visualiza√ß√µes B√°sicas", use_container_width=True):
                df = load_processed_data()
                if df is not None:
                    with st.spinner("Gerando visualiza√ß√µes..."):
                        generate_basic_visualizations(df)
                    st.success("‚úÖ Visualiza√ß√µes b√°sicas geradas!")
                    st.experimental_rerun()
        return
    
    st.success(f"‚úÖ Encontradas {len(image_files)} visualiza√ß√µes em: {images_dir}")
    
    # Grid de visualiza√ß√µes
    cols_per_row = 2
    for i in range(0, len(image_files), cols_per_row):
        cols = st.columns(cols_per_row)
        
        for j, col in enumerate(cols):
            if i + j < len(image_files):
                image_file = image_files[i + j]
                
                with col:
                    # Mostrar imagem
                    st.image(str(image_file), 
                            caption=f"üìä {image_file.stem.replace('_', ' ').title()}", 
                            use_column_width=True)
                    
                    # Informa√ß√µes da imagem
                    mod_time = datetime.fromtimestamp(image_file.stat().st_mtime)
                    st.caption(f"üìÖ {mod_time.strftime('%Y-%m-%d %H:%M')}")

def generate_basic_visualizations(df):
    """Gerar visualiza√ß√µes b√°sicas se n√£o existirem"""
    try:
        # Criar diret√≥rio se n√£o existir
        images_dir = Path("imagens")
        images_dir.mkdir(exist_ok=True)
        
        # Configurar estilo
        plt.style.use('default')
        
        # 1. Distribui√ß√£o da vari√°vel target
        if 'salary' in df.columns:
            fig, ax = plt.subplots(figsize=(8, 6))
            salary_counts = df['salary'].value_counts()
            colors = ['#28a745', '#dc3545']
            
            wedges, texts, autotexts = ax.pie(salary_counts.values, 
                                             labels=salary_counts.index,
                                             autopct='%1.1f%%',
                                             colors=colors,
                                             explode=(0.05, 0.05),
                                             shadow=True,
                                             startangle=90)
            
            ax.set_title('Distribui√ß√£o de Sal√°rios', fontsize=16, fontweight='bold')
            plt.savefig(images_dir / "salary_distribution.png", dpi=300, bbox_inches='tight')
            plt.close()
        
        # 2. Distribui√ß√£o de idade
        if 'age' in df.columns:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.hist(df['age'].dropna(), bins=30, color='#007bff', alpha=0.7, edgecolor='white')
            ax.set_title('Distribui√ß√£o de Idade', fontsize=16, fontweight='bold')
            ax.set_xlabel('Idade')
            ax.set_ylabel('Frequ√™ncia')
            ax.grid(True, alpha=0.3)
            plt.savefig(images_dir / "hist_age.png", dpi=300, bbox_inches='tight')
            plt.close()
            
    except Exception as e:
        st.error(f"Erro ao gerar visualiza√ß√µes: {e}")

def show_models_tab():
    """Tab de Modelos"""
    st.subheader("ü§ñ Modelos de Machine Learning")
    
    # Carregar artefatos
    artifacts = load_model_artifacts()
    
    if not artifacts:
        st.error("‚ùå Nenhum modelo encontrado!")
        st.info("üí° Execute primeiro: `python main.py` para treinar os modelos")
        return
    
    # Informa√ß√µes do modelo principal
    if 'model' in artifacts:
        model = artifacts['model']
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="info-card">
                <h4>‚úÖ Modelo Principal Carregado</h4>
                <p>Random Forest pronto para predi√ß√µes</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.subheader("üìä Informa√ß√µes do Modelo")
            
            model_info = {
                "Tipo": type(model).__name__,
                "N√∫mero de √Årvores": getattr(model, 'n_estimators', 'N/A'),
                "Profundidade M√°xima": getattr(model, 'max_depth', 'N/A'),
                "Random State": getattr(model, 'random_state', 'N/A'),
                "N√∫mero de Features": getattr(model, 'n_features_in_', 'N/A')
            }
            
            for key, value in model_info.items():
                st.metric(key, str(value))
        
        with col2:
            st.subheader("üéØ Performance Estimada")
            
            # M√©tricas simuladas (idealmente carregadas de logs)
            col_a, col_b = st.columns(2)
            
            with col_a:
                st.metric("üéØ Acur√°cia", "85.2%", delta="2.1%")
                st.metric("üìä Precis√£o", "84.1%", delta="1.8%")
            
            with col_b:
                st.metric("üîÑ Recall", "86.3%", delta="3.2%")
                st.metric("üìà F1-Score", "85.2%", delta="2.5%")
    
    # Informa√ß√µes do preprocessador
    if 'preprocessor' in artifacts:
        st.markdown("---")
        st.subheader("üîß Pipeline de Preprocessamento")
        
        preprocessor = artifacts['preprocessor']
        st.success("‚úÖ Preprocessador carregado com sucesso!")
        
        if hasattr(preprocessor, 'transformers'):
            st.write("**Transformadores configurados:**")
            
            for name, transformer, features in preprocessor.transformers:
                with st.expander(f"{name.upper()}: {type(transformer).__name__}"):
                    st.write(f"**Features processadas:** {len(features)}")
                    st.write(f"**Tipo de transforma√ß√£o:** {type(transformer).__name__}")
                    if hasattr(transformer, 'get_params'):
                        params = transformer.get_params()
                        st.write("**Par√¢metros:**")
                        for param, value in params.items():
                            st.write(f"- {param}: {value}")
    
    # Informa√ß√µes das features
    if 'feature_info' in artifacts:
        st.markdown("---")
        st.subheader("üìã Informa√ß√µes das Features")
        
        feature_info = artifacts['feature_info']
        
        if 'feature_names' in feature_info:
            total_features = len(feature_info['feature_names'])
            st.metric("Total de Features", total_features)
            
            with st.expander(f"üìù Ver todas as {total_features} features"):
                # Mostrar features em colunas
                cols = st.columns(3)
                for i, feature in enumerate(feature_info['feature_names']):
                    with cols[i % 3]:
                        st.write(f"{i+1}. {feature}")

def show_predictions_tab():
    """Tab de Predi√ß√µes"""
    st.subheader("üîÆ Centro de Predi√ß√µes")
    
    # Carregar artefatos
    artifacts = load_model_artifacts()
    
    if 'model' not in artifacts or 'preprocessor' not in artifacts:
        st.error("‚ùå Modelo ou preprocessador n√£o encontrados!")
        st.info("üí° Execute primeiro: `python main.py` para treinar os modelos")
        return
    
    model = artifacts['model']
    preprocessor = artifacts['preprocessor']
    
    st.success("‚úÖ Sistema de predi√ß√£o operacional!")
    
    # Formul√°rio para predi√ß√£o em duas colunas
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä Dados Pessoais e Demogr√°ficos")
        
        age = st.number_input("üéÇ Idade", min_value=17, max_value=100, value=35, help="Idade da pessoa")
        sex = st.selectbox("üë§ Sexo", ["Male", "Female"])
        race = st.selectbox("üåç Ra√ßa", ["White", "Asian-Pac-Islander", "Amer-Indian-Eskimo", "Other", "Black"])
        native_country = st.selectbox("üè≥Ô∏è Pa√≠s de Origem", 
                                    ["United-States", "Cambodia", "England", "Puerto-Rico", "Canada", 
                                     "Germany", "Outlying-US(Guam-USVI-etc)", "India", "Japan", "Greece"])
        
        st.markdown("#### üìö Educa√ß√£o")
        education = st.selectbox("üéì N√≠vel de Educa√ß√£o", 
                               ["Bachelors", "Masters", "Doctorate", "HS-grad", "Some-college", 
                                "Assoc-acdm", "Assoc-voc", "11th", "10th", "9th"])
        education_num = st.number_input("üìñ Anos de Educa√ß√£o", min_value=1, max_value=16, value=13, 
                                      help="N√∫mero total de anos de educa√ß√£o")
    
    with col2:
        st.markdown("#### üíº Informa√ß√µes Profissionais")
        
        workclass = st.selectbox("üè¢ Classe de Trabalho", 
                               ["Private", "Self-emp-not-inc", "Self-emp-inc", "Federal-gov", 
                                "Local-gov", "State-gov", "Without-pay"])
        occupation = st.selectbox("üëî Ocupa√ß√£o",
                                ["Tech-support", "Craft-repair", "Other-service", "Sales", 
                                 "Exec-managerial", "Prof-specialty", "Handlers-cleaners", "Machine-op-inspct"])
        hours_per_week = st.number_input("‚è∞ Horas/Semana", min_value=1, max_value=99, value=40, 
                                       help="Horas trabalhadas por semana")
        
        st.markdown("#### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Informa√ß√µes Familiares")
        marital_status = st.selectbox("üíë Estado Civil",
                                    ["Married-civ-spouse", "Never-married", "Divorced", "Separated", 
                                     "Widowed", "Married-spouse-absent", "Married-AF-spouse"])
        relationship = st.selectbox("üë™ Relacionamento Familiar",
                                  ["Wife", "Own-child", "Husband", "Not-in-family", "Other-relative", "Unmarried"])
        
        st.markdown("#### üí∞ Informa√ß√µes Financeiras")
        capital_gain = st.number_input("üìà Ganhos de Capital", min_value=0, value=0, 
                                     help="Ganhos de capital em d√≥lares")
        capital_loss = st.number_input("üìâ Perdas de Capital", min_value=0, value=0, 
                                     help="Perdas de capital em d√≥lares")
        fnlwgt = st.number_input("‚öñÔ∏è Peso Demogr√°fico", min_value=0, value=189778, 
                               help="Peso final demogr√°fico")
    
    # Bot√£o de predi√ß√£o centralizado
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üéØ FAZER PREDI√á√ÉO", use_container_width=True, type="primary"):
            # Criar DataFrame com os dados
            input_data = pd.DataFrame({
                'age': [age],
                'workclass': [workclass],
                'fnlwgt': [fnlwgt],
                'education': [education],
                'education-num': [education_num],
                'marital-status': [marital_status],
                'occupation': [occupation],
                'relationship': [relationship],
                'race': [race],
                'sex': [sex],
                'capital-gain': [capital_gain],
                'capital-loss': [capital_loss],
                'hours-per-week': [hours_per_week],
                'native-country': [native_country]
            })
            
            try:
                # Fazer predi√ß√£o
                input_processed = preprocessor.transform(input_data)
                prediction = model.predict(input_processed)[0]
                probability = model.predict_proba(input_processed)[0]
                
                # Mostrar resultado com estilo
                st.markdown("---")
                st.markdown("### üéØ Resultado da Predi√ß√£o")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if prediction == '>50K':
                        st.markdown("""
                        <div class="success-alert">
                            <h3>üí∞ Sal√°rio Previsto</h3>
                            <h2>> $50.000</h2>
                            <p>Sal√°rio acima de $50K anuais</p>
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown("""
                        <div class="warning-alert">
                            <h3>üí∏ Sal√°rio Previsto</h3>
                            <h2>‚â§ $50.000</h2>
                            <p>Sal√°rio at√© $50K anuais</p>
                        </div>
                        """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("**üìä Probabilidades:**")
                    prob_low = probability[0] * 100
                    prob_high = probability[1] * 100
                    
                    st.metric("‚â§ $50K", f"{prob_low:.1f}%")
                    st.metric("> $50K", f"{prob_high:.1f}%")
                
                with col3:
                    st.markdown("**üéØ Confian√ßa da Predi√ß√£o:**")
                    if prediction == '>50K':
                        confidence = prob_high
                        st.progress(confidence / 100)
                        st.write(f"**{confidence:.1f}%** de confian√ßa")
                    else:
                        confidence = prob_low
                        st.progress(confidence / 100)
                        st.write(f"**{confidence:.1f}%** de confian√ßa")
                        
            except Exception as e:
                st.error(f"‚ùå Erro ao fazer predi√ß√£o: {e}")
                st.info("Verifique se todos os campos est√£o preenchidos corretamente.")

def main():
    """Aplica√ß√£o principal do dashboard h√≠brido"""
    
    # Configurar estilo
    setup_dashboard_style()
    
    # Header principal
    st.markdown('<h1 class="main-header">üéØ Dashboard - An√°lise Salarial</h1>', unsafe_allow_html=True)
    
    # Verificar se dados est√£o dispon√≠veis
    df = load_processed_data()
    
    if df is None:
        st.error("‚ùå Dados processados n√£o encontrados!")
        st.info("üí° Execute primeiro: `python main.py` para processar os dados")
        st.stop()
    
    # Sistema de tabs principal
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üè† Vis√£o Geral", 
        "üîç An√°lise de Dados", 
        "üìà Visualiza√ß√µes", 
        "ü§ñ Modelos", 
        "üîÆ Predi√ß√µes"
    ])
    
    with tab1:
        show_overview_tab(df)
    
    with tab2:
        show_data_analysis_tab(df)
    
    with tab3:
        show_visualizations_tab()
    
    with tab4:
        show_models_tab()
    
    with tab5:
        show_predictions_tab()

if __name__ == "__main__":
    main()