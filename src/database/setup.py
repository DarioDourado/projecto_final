"""
üóÑÔ∏è Setup de Banco de Dados
Configura√ß√£o e inicializa√ß√£o do MySQL
"""

import logging
import os
from pathlib import Path
from typing import Optional

def setup_database() -> bool:
    """
    Configurar banco de dados MySQL
    
    Returns:
        bool: True se configura√ß√£o foi bem-sucedida
    """
    logger = logging.getLogger(__name__)
    
    print("üóÑÔ∏è CONFIGURA√á√ÉO DO BANCO DE DADOS")
    print("=" * 50)
    
    try:
        # 1. Verificar configura√ß√µes
        if not _check_database_config():
            print("‚ùå Configura√ß√µes de banco n√£o encontradas")
            _show_config_instructions()
            return False
        
        # 2. Testar conex√£o
        print("üìã Testando conex√£o com banco...")
        if not _test_connection():
            print("‚ùå N√£o foi poss√≠vel conectar ao banco")
            return False
        
        print("‚úÖ Conex√£o com banco OK")
        
        # 3. Criar estrutura
        print("üîß Criando estrutura do banco...")
        if not _create_database_structure():
            print("‚ùå Erro ao criar estrutura")
            return False
        
        print("‚úÖ Estrutura do banco criada")
        
        # 4. Executar migra√ß√£o (se necess√°rio)
        print("üîÑ Verificando necessidade de migra√ß√£o...")
        if _needs_migration():
            print("üìä Executando migra√ß√£o de dados...")
            if not _run_migration():
                print("‚ö†Ô∏è Problemas na migra√ß√£o, mas banco est√° configurado")
                return True
            print("‚úÖ Migra√ß√£o conclu√≠da")
        else:
            print("‚ÑπÔ∏è Migra√ß√£o n√£o necess√°ria")
        
        print("\nüéâ BANCO DE DADOS CONFIGURADO COM SUCESSO!")
        return True
        
    except Exception as e:
        logger.error(f"Erro na configura√ß√£o do banco: {e}")
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def _check_database_config() -> bool:
    """Verificar se as configura√ß√µes de banco est√£o presentes"""
    required_vars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']
    
    # Verificar vari√°veis de ambiente
    env_vars = {var: os.getenv(var) for var in required_vars}
    
    # Verificar arquivo .env
    env_file = Path('.env')
    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                env_content = f.read()
                for var in required_vars:
                    if f"{var}=" in env_content and not env_vars[var]:
                        # Extrair valor do .env
                        for line in env_content.split('\n'):
                            if line.startswith(f"{var}="):
                                env_vars[var] = line.split('=', 1)[1].strip()
        except Exception:
            pass
    
    # Verificar se todas as vari√°veis est√£o definidas
    missing_vars = [var for var, value in env_vars.items() if not value]
    
    if missing_vars:
        print(f"‚ö†Ô∏è Vari√°veis de ambiente em falta: {missing_vars}")
        return False
    
    print("‚úÖ Configura√ß√µes de banco encontradas")
    return True

def _show_config_instructions():
    """Mostrar instru√ß√µes de configura√ß√£o"""
    print("\nüí° INSTRU√á√ïES DE CONFIGURA√á√ÉO:")
    print("1. Crie um arquivo .env na raiz do projeto com:")
    print("""
DB_HOST=localhost
DB_USER=salary_user
DB_PASSWORD=sua_senha_aqui
DB_NAME=salary_analysis
""")
    print("2. Ou defina as vari√°veis de ambiente:")
    print("   export DB_HOST=localhost")
    print("   export DB_USER=salary_user")
    print("   export DB_PASSWORD=sua_senha")
    print("   export DB_NAME=salary_analysis")
    print("\n3. Certifique-se de que o MySQL est√° rodando")

def _test_connection() -> bool:
    """Testar conex√£o com o banco"""
    try:
        from src.database.connection import create_connection
        
        conn = create_connection()
        if conn:
            conn.close()
            return True
        return False
        
    except ImportError:
        print("‚ö†Ô∏è M√≥dulo de conex√£o n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def _create_database_structure() -> bool:
    """Criar estrutura do banco de dados"""
    try:
        from src.database.migration import create_tables
        return create_tables()
        
    except ImportError:
        print("‚ö†Ô∏è M√≥dulo de migra√ß√£o n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao criar estrutura: {e}")
        return False

def _needs_migration() -> bool:
    """Verificar se precisa de migra√ß√£o de dados"""
    try:
        from src.database.models import SalaryAnalysisSQL
        
        sql_model = SalaryAnalysisSQL()
        df = sql_model.get_dataset_for_ml()
        
        # Se n√£o h√° dados ou muito poucos, precisa migrar
        return df is None or len(df) < 100
        
    except Exception:
        return True  # Em caso de erro, assumir que precisa migrar

def _run_migration() -> bool:
    """Executar migra√ß√£o de dados CSV ‚Üí SQL"""
    try:
        from src.database.migration import migrate_csv_to_sql
        return migrate_csv_to_sql()
        
    except ImportError:
        print("‚ö†Ô∏è Sistema de migra√ß√£o n√£o dispon√≠vel")
        return False
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o: {e}")
        return False

if __name__ == "__main__":
    success = setup_database()
    if success:
        print("\n‚úÖ Setup conclu√≠do com sucesso!")
    else:
        print("\n‚ùå Setup falhou. Sistema funcionar√° em modo CSV.")