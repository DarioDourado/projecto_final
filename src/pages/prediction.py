"""
P√°gina de Predi√ß√£o Salarial Interativa
Sistema de Machine Learning para Predi√ß√£o em Tempo Real
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime
import json
import joblib
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def show_prediction_page(data):
    """P√°gina principal de predi√ß√£o salarial"""
    st.title("üîÆ Predi√ß√£o Salarial Interativa")
    st.markdown("### Sistema Avan√ßado de Machine Learning")
    
    # Header contextual
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    ">
        <h2 style="margin: 0; font-size: 1.8rem;">üéØ Predi√ß√£o Cient√≠fica de Sal√°rios</h2>
        <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.9;">
            Algoritmos: Random Forest ‚Ä¢ Logistic Regression ‚Ä¢ Feature Engineering
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Verificar disponibilidade de dados
    if not data or 'original' not in data:
        show_no_data_warning()
        return
    
    # Carregar modelo se dispon√≠vel
    model_status = load_trained_model()
    
    # Contexto do dataset
    show_dataset_context(data['original'])
    
    # Interface principal de predi√ß√£o
    prediction_result = show_enhanced_prediction_interface(data['original'], model_status)
    
    # Hist√≥rico de predi√ß√µes
    show_prediction_history()
    
    # An√°lise de performance do modelo
    show_model_performance()
    
    # Insights e interpretabilidade
    show_advanced_insights()

def load_trained_model():
    """Carregar modelo treinado se dispon√≠vel"""
    model_paths = [
        Path("models/random_forest_model.joblib"),
        Path("models/logistic_regression_model.joblib"),
        Path("models/best_model.joblib")
    ]
    
    for model_path in model_paths:
        if model_path.exists():
            try:
                model = joblib.load(model_path)
                feature_info_path = model_path.parent / "feature_info.joblib"
                feature_info = joblib.load(feature_info_path) if feature_info_path.exists() else None
                
                return {
                    'model': model,
                    'feature_info': feature_info,
                    'model_name': model_path.stem,
                    'path': str(model_path),
                    'loaded': True
                }
            except Exception as e:
                logger.warning(f"Erro ao carregar modelo {model_path}: {e}")
                continue
    
    return {'loaded': False, 'model': None}

def show_no_data_warning():
    """Exibir aviso quando n√£o h√° dados"""
    st.warning("‚ö†Ô∏è Dados n√£o dispon√≠veis para predi√ß√£o")
    st.info("Execute o pipeline principal para gerar os dados necess√°rios:")
    st.code("python main.py", language="bash")

def show_dataset_context(df):
    """Mostrar contexto e estat√≠sticas do dataset"""
    st.subheader("üìä Contexto dos Dados de Treinamento")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        create_context_card("üìã Total de Registros", f"{len(df):,}", "Base de dados", "#4285f4")
    
    with col2:
        if 'salary' in df.columns:
            high_salary_pct = (df['salary'] == '>50K').mean() * 100
            create_context_card("üí∞ Sal√°rios >50K", f"{high_salary_pct:.1f}%", "Distribui√ß√£o positiva", "#28a745")
        else:
            create_context_card("üí∞ Sal√°rios >50K", "N/A", "Dados indispon√≠veis", "#6c757d")
    
    with col3:
        if 'age' in df.columns:
            avg_age = df['age'].mean()
            create_context_card("üë§ Idade M√©dia", f"{avg_age:.1f}", "Anos", "#ffc107")
        else:
            create_context_card("üë§ Idade M√©dia", "N/A", "Dados indispon√≠veis", "#6c757d")
    
    with col4:
        if 'hours-per-week' in df.columns:
            avg_hours = df['hours-per-week'].mean()
            create_context_card("‚è∞ Horas/Semana", f"{avg_hours:.1f}", "M√©dia trabalho", "#17a2b8")
        else:
            create_context_card("‚è∞ Horas/Semana", "N/A", "Dados indispon√≠veis", "#6c757d")

def create_context_card(title, value, description, color):
    """Criar card de contexto visual"""
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, {color}15, {color}08);
        padding: 1.2rem;
        border-radius: 12px;
        border-left: 4px solid {color};
        margin: 0.5rem 0;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        text-align: center;
        min-height: 120px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        transition: transform 0.2s;
    ">
        <h4 style="margin: 0; color: #333; font-size: 0.9rem; font-weight: 600;">
            {title}
        </h4>
        <h2 style="margin: 0.6rem 0; color: {color}; font-size: 2rem; font-weight: bold;">
            {value}
        </h2>
        <p style="margin: 0; color: #666; font-size: 0.8rem; opacity: 0.8;">
            {description}
        </p>
    </div>
    """, unsafe_allow_html=True)

def show_enhanced_prediction_interface(df, model_status):
    """Interface avan√ßada de predi√ß√£o"""
    st.subheader("üöÄ Configura√ß√£o de Predi√ß√£o Avan√ßada")
    
    # Status do modelo
    if model_status['loaded']:
        st.success(f"‚úÖ Modelo carregado: {model_status['model_name']}")
    else:
        st.warning("‚ö†Ô∏è Usando modelo heur√≠stico (treine modelos para melhor precis√£o)")
    
    # Tabs para diferentes modos de predi√ß√£o
    tab1, tab2, tab3 = st.tabs(["üéØ Predi√ß√£o Individual", "üìä Predi√ß√£o em Lote", "üîÑ Compara√ß√£o de Modelos"])
    
    with tab1:
        result = show_individual_prediction_form(df, model_status)
        return result
    
    with tab2:
        show_batch_prediction_interface(df, model_status)
    
    with tab3:
        show_model_comparison_interface(df, model_status)

def show_individual_prediction_form(df, model_status):
    """Formul√°rio de predi√ß√£o individual"""
    with st.form("enhanced_prediction_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë§ Informa√ß√µes Pessoais")
            
            age = st.slider(
                "üéÇ Idade",
                min_value=18, 
                max_value=90, 
                value=35,
                step=1,
                help="Idade em anos - fator importante para experi√™ncia profissional"
            )
            
            sex = st.selectbox(
                "‚ö• Sexo",
                ['Male', 'Female'],
                help="Informa√ß√£o demogr√°fica"
            )
            
            education = st.selectbox(
                "üéì N√≠vel de Educa√ß√£o",
                [
                    'Doctorate', 'Prof-school', 'Masters', 'Bachelors',
                    'Assoc-acdm', 'Assoc-voc', 'Some-college', 'HS-grad',
                    '12th', '11th', '10th', '9th', '7th-8th', '5th-6th',
                    '1st-4th', 'Preschool'
                ],
                index=3,  # Bachelors por padr√£o
                help="Maior n√≠vel educacional completado - fator mais importante"
            )
            
            marital_status = st.selectbox(
                "üíë Estado Civil",
                [
                    'Married-civ-spouse', 'Never-married', 'Divorced',
                    'Separated', 'Widowed', 'Married-spouse-absent',
                    'Married-AF-spouse'
                ],
                help="Estado civil atual"
            )
            
            race = st.selectbox(
                "üåç Etnia",
                ['White', 'Black', 'Asian-Pac-Islander', 'Amer-Indian-Eskimo', 'Other'],
                help="Informa√ß√£o √©tnica"
            )
            
            native_country = st.selectbox(
                "üó∫Ô∏è Pa√≠s de Origem",
                ['United-States', 'Mexico', 'Philippines', 'Germany', 'Canada', 
                 'Puerto-Rico', 'El-Salvador', 'India', 'Cuba', 'England', 'Other'],
                help="Pa√≠s de nascimento"
            )
        
        with col2:
            st.markdown("#### üíº Informa√ß√µes Profissionais")
            
            workclass = st.selectbox(
                "üè¢ Classe de Trabalho",
                [
                    'Private', 'Self-emp-not-inc', 'Self-emp-inc',
                    'Federal-gov', 'Local-gov', 'State-gov',
                    'Without-pay', 'Never-worked'
                ],
                help="Tipo de empregador"
            )
            
            occupation = st.selectbox(
                "üíº Ocupa√ß√£o",
                [
                    'Prof-specialty', 'Exec-managerial', 'Tech-support',
                    'Craft-repair', 'Sales', 'Adm-clerical', 'Other-service',
                    'Machine-op-inspct', 'Transport-moving', 'Handlers-cleaners',
                    'Farming-fishing', 'Protective-serv', 'Priv-house-serv',
                    'Armed-Forces'
                ],
                help="√Årea de atua√ß√£o profissional"
            )
            
            hours_per_week = st.slider(
                "‚è∞ Horas por Semana",
                min_value=1,
                max_value=99,
                value=40,
                step=1,
                help="Horas trabalhadas por semana"
            )
            
            relationship = st.selectbox(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Relacionamento Familiar",
                [
                    'Husband', 'Not-in-family', 'Wife',
                    'Own-child', 'Unmarried', 'Other-relative'
                ],
                help="Posi√ß√£o na fam√≠lia"
            )
            
            # Campos calculados automaticamente
            education_num = get_education_num(education)
            st.info(f"üìö Anos de educa√ß√£o calculados: {education_num}")
            
            capital_gain = st.number_input(
                "üíπ Ganho de Capital",
                min_value=0,
                max_value=99999,
                value=0,
                help="Ganhos de capital no ano"
            )
            
            capital_loss = st.number_input(
                "üìâ Perda de Capital",
                min_value=0,
                max_value=99999,
                value=0,
                help="Perdas de capital no ano"
            )
        
        # Bot√£o de predi√ß√£o
        st.markdown("---")
        col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
        
        with col_btn2:
            predict_button = st.form_submit_button(
                "üöÄ Executar Predi√ß√£o Avan√ßada",
                type="primary",
                use_container_width=True
            )
    
    # Processar predi√ß√£o
    if predict_button:
        features = {
            'age': age,
            'sex': sex,
            'education': education,
            'education_num': education_num,
            'marital_status': marital_status,
            'occupation': occupation,
            'relationship': relationship,
            'race': race,
            'native_country': native_country,
            'workclass': workclass,
            'hours_per_week': hours_per_week,
            'capital_gain': capital_gain,
            'capital_loss': capital_loss
        }
        
        # Executar predi√ß√£o
        if model_status['loaded']:
            prediction_result = predict_with_trained_model(features, model_status)
        else:
            prediction_result = predict_with_heuristic_model(features)
        
        # Salvar no hist√≥rico
        save_prediction_to_history(prediction_result)
        
        # Exibir resultados
        show_enhanced_prediction_result(prediction_result)
        
        return prediction_result
    
    return None

def get_education_num(education):
    """Converter n√≠vel educacional para n√∫mero de anos"""
    education_mapping = {
        'Preschool': 1, '1st-4th': 3, '5th-6th': 6, '7th-8th': 8,
        '9th': 9, '10th': 10, '11th': 11, '12th': 12, 'HS-grad': 13,
        'Some-college': 14, 'Assoc-voc': 15, 'Assoc-acdm': 15,
        'Bachelors': 16, 'Masters': 18, 'Prof-school': 20, 'Doctorate': 21
    }
    return education_mapping.get(education, 13)

def predict_with_trained_model(features, model_status):
    """Predi√ß√£o usando modelo treinado"""
    try:
        model = model_status['model']
        feature_info = model_status.get('feature_info', {})
        
        # Preparar dados para o modelo
        feature_df = prepare_features_for_model(features, feature_info)
        
        # Fazer predi√ß√£o
        prediction = model.predict(feature_df)[0]
        
        # Obter probabilidades se dispon√≠vel
        try:
            probabilities = model.predict_proba(feature_df)[0]
            probability_high = probabilities[1] if len(probabilities) > 1 else probabilities[0]
        except:
            probability_high = 0.5  # Fallback
        
        # Calcular confian√ßa
        confidence = calculate_confidence(probability_high)
        
        # Obter feature importance se dispon√≠vel
        feature_importance = get_feature_importance(model, feature_df.columns)
        
        return {
            'prediction': prediction,
            'probability': probability_high,
            'confidence': confidence,
            'method': 'trained_model',
            'model_name': model_status['model_name'],
            'features': features,
            'feature_importance': feature_importance,
            'timestamp': datetime.now()
        }
        
    except Exception as e:
        logger.error(f"Erro na predi√ß√£o com modelo treinado: {e}")
        return predict_with_heuristic_model(features)

def prepare_features_for_model(features, feature_info):
    """Preparar features para o modelo treinado"""
    # Criar DataFrame com as features
    df = pd.DataFrame([features])
    
    # Aplicar encoding se necess√°rio
    if feature_info and 'encoders' in feature_info:
        for column, encoder in feature_info['encoders'].items():
            if column in df.columns:
                try:
                    df[column] = encoder.transform(df[column])
                except:
                    # Se falhar, usar valor padr√£o
                    df[column] = 0
    
    return df

def predict_with_heuristic_model(features):
    """Predi√ß√£o usando modelo heur√≠stico (regras de neg√≥cio)"""
    score = 0
    details = []
    max_score = 100
    
    # Pontua√ß√£o por educa√ß√£o (peso 30%)
    education_scores = {
        'Doctorate': 30, 'Prof-school': 28, 'Masters': 25, 'Bachelors': 20,
        'Assoc-acdm': 12, 'Assoc-voc': 10, 'Some-college': 8, 'HS-grad': 5,
        '12th': 3, '11th': 2, '10th': 1, '9th': 0, '7th-8th': 0
    }
    edu_score = education_scores.get(features['education'], 0)
    score += edu_score
    details.append(f"Educa√ß√£o ({features['education']}): +{edu_score} pontos")
    
    # Pontua√ß√£o por idade (peso 20%)
    age = features['age']
    if age >= 50:
        age_score = 20
    elif age >= 40:
        age_score = 15
    elif age >= 30:
        age_score = 10
    elif age >= 25:
        age_score = 5
    else:
        age_score = 0
    
    score += age_score
    details.append(f"Idade ({age} anos): +{age_score} pontos")
    
    # Pontua√ß√£o por ocupa√ß√£o (peso 15%)
    occupation_scores = {
        'Exec-managerial': 15, 'Prof-specialty': 14, 'Tech-support': 10,
        'Sales': 8, 'Craft-repair': 6, 'Adm-clerical': 4, 'Protective-serv': 6,
        'Other-service': 2, 'Machine-op-inspct': 3, 'Transport-moving': 3,
        'Handlers-cleaners': 1, 'Farming-fishing': 1, 'Priv-house-serv': 0
    }
    occ_score = occupation_scores.get(features['occupation'], 3)
    score += occ_score
    details.append(f"Ocupa√ß√£o ({features['occupation']}): +{occ_score} pontos")
    
    # Pontua√ß√£o por horas trabalhadas (peso 15%)
    hours = features['hours_per_week']
    if hours >= 50:
        hours_score = 15
    elif hours >= 40:
        hours_score = 10
    elif hours >= 30:
        hours_score = 5
    else:
        hours_score = 0
    
    score += hours_score
    details.append(f"Horas/semana ({hours}h): +{hours_score} pontos")
    
    # Pontua√ß√£o por estado civil (peso 10%)
    if features['marital_status'] in ['Married-civ-spouse', 'Married-AF-spouse']:
        marital_score = 10
        details.append(f"Estado civil (Casado): +{marital_score} pontos")
    else:
        marital_score = 0
    
    score += marital_score
    
    # Pontua√ß√£o por classe de trabalho (peso 10%)
    workclass_scores = {
        'Federal-gov': 8, 'Self-emp-inc': 10, 'Local-gov': 6,
        'State-gov': 6, 'Private': 5, 'Self-emp-not-inc': 3,
        'Without-pay': 0, 'Never-worked': 0
    }
    work_score = workclass_scores.get(features['workclass'], 0)
    score += work_score
    details.append(f"Classe trabalho ({features['workclass']}): +{work_score} pontos")
    
    # Calcular probabilidade
    probability = min(score / max_score, 0.95)
    prediction = ">50K" if probability > 0.5 else "<=50K"
    confidence = calculate_confidence(probability)
    
    return {
        'prediction': prediction,
        'probability': probability,
        'confidence': confidence,
        'method': 'heuristic',
        'score': score,
        'max_score': max_score,
        'details': details,
        'features': features,
        'timestamp': datetime.now()
    }

def calculate_confidence(probability):
    """Calcular n√≠vel de confian√ßa baseado na probabilidade"""
    if probability > 0.8 or probability < 0.2:
        return "Muito Alta"
    elif probability > 0.7 or probability < 0.3:
        return "Alta"
    elif probability > 0.6 or probability < 0.4:
        return "M√©dia"
    else:
        return "Baixa"

def get_feature_importance(model, feature_names):
    """Obter import√¢ncia das features se dispon√≠vel"""
    try:
        if hasattr(model, 'feature_importances_'):
            importances = model.feature_importances_
            return dict(zip(feature_names, importances))
        else:
            return {}
    except:
        return {}

def show_enhanced_prediction_result(result):
    """Exibir resultado da predi√ß√£o de forma avan√ßada"""
    st.subheader("üéØ Resultado da Predi√ß√£o")
    
    # Cards de resultado principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        pred_color = "#28a745" if result['prediction'] == ">50K" else "#17a2b8"
        create_result_card("üéØ Predi√ß√£o", result['prediction'], "Faixa salarial", pred_color)
    
    with col2:
        prob_color = "#28a745" if result['probability'] > 0.7 else "#ffc107" if result['probability'] > 0.3 else "#dc3545"
        create_result_card("üìä Probabilidade", f"{result['probability']:.1%}", "Chance de >50K", prob_color)
    
    with col3:
        conf_color = {"Muito Alta": "#28a745", "Alta": "#4CAF50", "M√©dia": "#ffc107", "Baixa": "#dc3545"}
        create_result_card("‚úÖ Confian√ßa", result['confidence'], "N√≠vel de certeza", conf_color.get(result['confidence'], "#6c757d"))
    
    with col4:
        method_color = "#4285f4" if result['method'] == 'trained_model' else "#ff9800"
        method_text = "Modelo ML" if result['method'] == 'trained_model' else "Heur√≠stico"
        create_result_card("ü§ñ M√©todo", method_text, "Tipo de predi√ß√£o", method_color)
    
    # Visualiza√ß√µes avan√ßadas
    col1, col2 = st.columns(2)
    
    with col1:
        # Gauge de probabilidade
        fig_gauge = create_probability_gauge(result['probability'])
        st.plotly_chart(fig_gauge, use_container_width=True)
    
    with col2:
        # Gr√°fico de feature importance se dispon√≠vel
        if 'feature_importance' in result and result['feature_importance']:
            fig_importance = create_feature_importance_chart(result['feature_importance'])
            st.plotly_chart(fig_importance, use_container_width=True)
        else:
            # Gr√°fico de pontua√ß√£o heur√≠stica
            if 'details' in result:
                fig_score = create_score_breakdown_chart(result['details'])
                st.plotly_chart(fig_score, use_container_width=True)
    
    # Detalhamento e interpreta√ß√£o
    show_detailed_interpretation(result)

def create_result_card(title, value, description, color):
    """Criar card de resultado visual"""
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, {color}15, {color}08);
        padding: 1.5rem;
        border-radius: 12px;
        border: 2px solid {color};
        margin: 0.5rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        text-align: center;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        transform: scale(1.02);
        transition: transform 0.3s ease;
    ">
        <h4 style="margin: 0; color: #333; font-size: 0.9rem; font-weight: 600;">
            {title}
        </h4>
        <h2 style="margin: 0.8rem 0; color: {color}; font-size: 2.2rem; font-weight: bold;">
            {value}
        </h2>
        <p style="margin: 0; color: #666; font-size: 0.8rem; opacity: 0.8;">
            {description}
        </p>
    </div>
    """, unsafe_allow_html=True)

def create_probability_gauge(probability):
    """Criar gauge de probabilidade"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = probability * 100,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Probabilidade de Sal√°rio >50K (%)"},
        delta = {'reference': 50},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': "#4285f4"},
            'steps': [
                {'range': [0, 25], 'color': "#ffebee"},
                {'range': [25, 50], 'color': "#fff3e0"},
                {'range': [50, 75], 'color': "#e8f5e8"},
                {'range': [75, 100], 'color': "#e3f2fd"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 50
            }
        }
    ))
    
    fig.update_layout(
        height=350,
        font={'color': "#333"},
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)'
    )
    
    return fig

def create_feature_importance_chart(feature_importance):
    """Criar gr√°fico de import√¢ncia das features"""
    # Ordenar por import√¢ncia
    sorted_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)
    top_features = sorted_features[:10]  # Top 10
    
    features, importances = zip(*top_features)
    
    fig = go.Figure(go.Bar(
        x=list(importances),
        y=list(features),
        orientation='h',
        marker_color='#4285f4',
        text=[f'{imp:.3f}' for imp in importances],
        textposition='auto'
    ))
    
    fig.update_layout(
        title="üîç Import√¢ncia das Features",
        xaxis_title="Import√¢ncia",
        yaxis_title="Features",
        height=350,
        font={'color': "#333"},
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)'
    )
    
    return fig

def create_score_breakdown_chart(details):
    """Criar gr√°fico de breakdown da pontua√ß√£o"""
    # Extrair pontua√ß√µes dos detalhes
    scores = []
    categories = []
    
    for detail in details:
        if '+' in detail:
            parts = detail.split(': +')
            if len(parts) == 2:
                category = parts[0]
                score = int(parts[1].split(' ')[0])
                categories.append(category)
                scores.append(score)
    
    if not scores:
        return None
    
    fig = go.Figure(go.Bar(
        x=categories,
        y=scores,
        marker_color='#ff9800',
        text=scores,
        textposition='auto'
    ))
    
    fig.update_layout(
        title="üìä Breakdown da Pontua√ß√£o",
        xaxis_title="Categorias",
        yaxis_title="Pontos",
        height=350,
        font={'color': "#333"},
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)'
    )
    
    return fig

def show_detailed_interpretation(result):
    """Mostrar interpreta√ß√£o detalhada do resultado"""
    st.subheader("üí° Interpreta√ß√£o Detalhada")
    
    # Interpreta√ß√£o baseada no resultado
    if result['probability'] > 0.7:
        interpretation = "üü¢ **Alta probabilidade** de sal√°rio >50K. O perfil apresenta caracter√≠sticas favor√°veis."
        recommendations = [
            "‚úÖ Perfil muito competitivo no mercado",
            "üìà Considere negociar benef√≠cios adicionais",
            "üéØ Foque em oportunidades de lideran√ßa"
        ]
    elif result['probability'] > 0.3:
        interpretation = "üü° **Probabilidade moderada** - perfil no limite entre faixas salariais."
        recommendations = [
            "üìö Considere investir em educa√ß√£o adicional",
            "‚è∞ Avalie aumentar carga hor√°ria se poss√≠vel",
            "üíº Explore oportunidades em √°reas especializadas"
        ]
    else:
        interpretation = "üîµ **Baixa probabilidade** baseada no perfil atual."
        recommendations = [
            "üéì Investimento em educa√ß√£o √© fundamental",
            "üîÑ Considere mudan√ßa para √°reas com maior potencial",
            "üìä Analise o mercado para identificar oportunidades"
        ]
    
    st.markdown(interpretation)
    
    # Recomenda√ß√µes
    st.markdown("#### üéØ Recomenda√ß√µes Personalizadas")
    for rec in recommendations:
        st.markdown(f"- {rec}")
    
    # Detalhes t√©cnicos se dispon√≠vel
    if 'details' in result:
        with st.expander("üîç Detalhes da An√°lise"):
            for detail in result['details']:
                st.markdown(f"‚Ä¢ {detail}")
    
    # Limita√ß√µes e considera√ß√µes
    st.markdown("#### ‚ö†Ô∏è Limita√ß√µes e Considera√ß√µes")
    limitations = [
        "üìä **Base de Dados**: Resultados baseados em dados hist√≥ricos (Census 1994)",
        "üîç **Vi√©s de Dados**: Pode conter vieses sociais da √©poca",
        "‚è∞ **Contexto Temporal**: Mercado atual pode diferir significativamente",
        "üéØ **Uso Orientativo**: Use como ferramenta de orienta√ß√£o, n√£o decis√£o definitiva"
    ]
    
    for limitation in limitations:
        st.markdown(f"- {limitation}")

def show_batch_prediction_interface(df, model_status):
    """Interface para predi√ß√£o em lote"""
    st.markdown("### üìä Predi√ß√£o em Lote")
    st.info("üöß Funcionalidade em desenvolvimento - Upload de CSV para predi√ß√µes m√∫ltiplas")
    
    # Placeholder para upload de arquivo
    uploaded_file = st.file_uploader(
        "Upload arquivo CSV para predi√ß√£o em lote",
        type=['csv'],
        help="Arquivo deve conter as mesmas colunas do dataset de treinamento"
    )
    
    if uploaded_file:
        st.success("üìÅ Arquivo carregado com sucesso!")
        st.info("üîÑ Processamento em lote ser√° implementado em vers√£o futura")

def show_model_comparison_interface(df, model_status):
    """Interface para compara√ß√£o de modelos"""
    st.markdown("### üîÑ Compara√ß√£o de Modelos")
    st.info("üöß Funcionalidade em desenvolvimento - Compara√ß√£o entre diferentes algoritmos")
    
    # Placeholder para sele√ß√£o de modelos
    available_models = ["Random Forest", "Logistic Regression", "Gradient Boosting", "SVM"]
    selected_models = st.multiselect(
        "Selecione modelos para compara√ß√£o",
        available_models,
        default=["Random Forest", "Logistic Regression"]
    )
    
    if selected_models:
        st.success(f"üìã Modelos selecionados: {', '.join(selected_models)}")
        st.info("üîÑ Compara√ß√£o entre modelos ser√° implementada em vers√£o futura")

def show_prediction_history():
    """Mostrar hist√≥rico de predi√ß√µes da sess√£o"""
    if 'prediction_history' not in st.session_state or len(st.session_state.prediction_history) == 0:
        return
    
    st.subheader("üìö Hist√≥rico de Predi√ß√µes")
    
    history = st.session_state.prediction_history
    
    # Criar DataFrame do hist√≥rico
    history_data = []
    for i, pred in enumerate(reversed(history)):
        history_data.append({
            '#': len(history) - i,
            'Timestamp': pred['timestamp'].strftime('%H:%M:%S'),
            'Predi√ß√£o': pred['prediction'],
            'Probabilidade': f"{pred['probability']:.1%}",
            'Confian√ßa': pred['confidence'],
            'M√©todo': pred.get('method', 'heuristic'),
            'Idade': pred['features']['age'],
            'Educa√ß√£o': pred['features']['education'],
            'Ocupa√ß√£o': pred['features']['occupation']
        })
    
    history_df = pd.DataFrame(history_data)
    
    # Exibir tabela
    st.dataframe(history_df, use_container_width=True)
    
    # Gr√°fico de tend√™ncia
    if len(history) > 1:
        fig_trend = px.line(
            x=range(1, len(history) + 1),
            y=[pred['probability'] for pred in history],
            title="üìà Tend√™ncia das Probabilidades",
            labels={'x': 'Predi√ß√£o #', 'y': 'Probabilidade'},
            markers=True
        )
        
        fig_trend.add_hline(y=0.5, line_dash="dash", line_color="red", 
                           annotation_text="Limiar 50%")
        
        fig_trend.update_layout(height=300)
        st.plotly_chart(fig_trend, use_container_width=True)
    
    # Bot√£o para limpar hist√≥rico
    col1, col2, col3 = st.columns([1, 1, 1])
    with col2:
        if st.button("üóëÔ∏è Limpar Hist√≥rico", type="secondary", use_container_width=True):
            st.session_state.prediction_history = []
            st.rerun()

def save_prediction_to_history(result):
    """Salvar predi√ß√£o no hist√≥rico da sess√£o"""
    if 'prediction_history' not in st.session_state:
        st.session_state.prediction_history = []
    
    # Adicionar resultado ao hist√≥rico
    st.session_state.prediction_history.append(result)
    
    # Manter apenas os √∫ltimos 20 resultados
    if len(st.session_state.prediction_history) > 20:
        st.session_state.prediction_history = st.session_state.prediction_history[-20:]

def show_model_performance():
    """Mostrar m√©tricas de performance do modelo"""
    st.subheader("üìä Performance do Modelo")
    
    # M√©tricas simuladas (em produ√ß√£o, viriam do modelo real)
    metrics = {
        'Acur√°cia': 0.847,
        'Precis√£o': 0.823,
        'Recall': 0.756,
        'F1-Score': 0.788,
        'ROC-AUC': 0.892
    }
    
    col1, col2, col3, col4, col5 = st.columns(5)
    colors = ['#28a745', '#4285f4', '#ffc107', '#17a2b8', '#6f42c1']
    
    for i, (metric, value) in enumerate(metrics.items()):
        with [col1, col2, col3, col4, col5][i]:
            create_metric_card(metric, f"{value:.3f}", "Score", colors[i])

def create_metric_card(title, value, description, color):
    """Criar card de m√©trica"""
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, {color}15, {color}08);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid {color};
        text-align: center;
        min-height: 100px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    ">
        <h4 style="margin: 0; color: #333; font-size: 0.8rem; font-weight: 600;">
            {title}
        </h4>
        <h2 style="margin: 0.5rem 0; color: {color}; font-size: 1.5rem; font-weight: bold;">
            {value}
        </h2>
        <p style="margin: 0; color: #666; font-size: 0.7rem; opacity: 0.8;">
            {description}
        </p>
    </div>
    """, unsafe_allow_html=True)

def show_advanced_insights():
    """Mostrar insights avan√ßados sobre predi√ß√£o"""
    st.subheader("üí° Insights Avan√ßados")
    
    insights = [
        {
            "icon": "üéì",
            "title": "Educa√ß√£o √© o Fator Determinante",
            "message": "N√≠vel educacional representa ~30% da import√¢ncia na predi√ß√£o. Investimento em educa√ß√£o superior aumenta significativamente as chances de sal√°rios elevados.",
            "color": "#4285f4"
        },
        {
            "icon": "‚è∞",
            "title": "Carga Hor√°ria Importa",
            "message": "Profissionais que trabalham 50+ horas por semana t√™m 2x mais chances de sal√°rios >50K. Balance produtividade e qualidade de vida.",
            "color": "#ffc107"
        },
        {
            "icon": "üíº",
            "title": "Ocupa√ß√£o Estrat√©gica",
            "message": "Cargos executivos e de especializa√ß√£o t√©cnica apresentam maior potencial. Considere desenvolvimento em √°reas de alta demanda.",
            "color": "#28a745"
        },
        {
            "icon": "üìà",
            "title": "Experi√™ncia Profissional",
            "message": "Idade (proxy para experi√™ncia) √© fator positivo. Profissionais 40+ t√™m vantagem significativa na faixa salarial superior.",
            "color": "#17a2b8"
        }
    ]
    
    for insight in insights:
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, {insight['color']}15, {insight['color']}08);
            padding: 1.5rem;
            border-radius: 12px;
            border-left: 4px solid {insight['color']};
            margin: 1rem 0;
            display: flex;
            align-items: flex-start;
        ">
            <div style="font-size: 2rem; margin-right: 1rem; margin-top: 0.2rem;">
                {insight['icon']}
            </div>
            <div>
                <h4 style="margin: 0 0 0.8rem 0; color: #333; font-size: 1.1rem;">
                    {insight['title']}
                </h4>
                <p style="margin: 0; color: #555; line-height: 1.6; font-size: 0.95rem;">
                    {insight['message']}
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)