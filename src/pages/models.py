"""
P√°gina de Modelos de Machine Learning
"""

import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import joblib
import plotly.express as px
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

def show_models_page(data, i18n):
    """
    Mostrar p√°gina de modelos de ML
    """
    st.header("ü§ñ Modelos de Machine Learning")
    
    if data is None or data.empty:
        st.warning("‚ö†Ô∏è Dados n√£o carregados. Verifique a conex√£o com a fonte de dados.")
        return
    
    # Sidebar para op√ß√µes
    st.sidebar.header("üîß Configura√ß√µes do Modelo")
    
    model_action = st.sidebar.selectbox(
        "A√ß√£o:",
        ["Treinar Novo Modelo", "Carregar Modelo Existente", "Comparar Modelos"]
    )
    
    if model_action == "Treinar Novo Modelo":
        show_train_model(data)
    elif model_action == "Carregar Modelo Existente":
        show_load_model(data)
    elif model_action == "Comparar Modelos":
        show_compare_models(data)

def show_train_model(data):
    """Interface para treinar novo modelo"""
    st.subheader("üèãÔ∏è Treinar Novo Modelo")
    
    # Verificar se h√° dados num√©ricos suficientes
    numeric_cols = data.select_dtypes(include=['int64', 'float64']).columns.tolist()
    
    if len(numeric_cols) < 2:
        st.error("Necess√°rio pelo menos 2 vari√°veis num√©ricas para treinar um modelo")
        return
    
    # Sele√ß√£o de vari√°veis
    col1, col2 = st.columns(2)
    
    with col1:
        target_var = st.selectbox("Vari√°vel Target (y):", numeric_cols)
    
    with col2:
        feature_vars = st.multiselect(
            "Vari√°veis Features (X):", 
            [col for col in numeric_cols if col != target_var],
            default=[col for col in numeric_cols if col != target_var][:3]
        )
    
    if not feature_vars:
        st.warning("Selecione pelo menos uma vari√°vel feature")
        return
    
    # Par√¢metros do modelo
    st.subheader("‚öôÔ∏è Par√¢metros do Modelo")
    
    model_type = st.selectbox(
        "Tipo de Modelo:",
        ["Random Forest", "Regress√£o Linear"]
    )
    
    test_size = st.slider("Tamanho do conjunto de teste:", 0.1, 0.5, 0.2, 0.05)
    
    if st.button("üöÄ Treinar Modelo", type="primary"):
        train_and_evaluate_model(data, target_var, feature_vars, model_type, test_size)

def train_and_evaluate_model(data, target_var, feature_vars, model_type, test_size):
    """Treinar e avaliar modelo"""
    try:
        # Preparar dados
        X = data[feature_vars].dropna()
        y = data.loc[X.index, target_var]
        
        # Dividir dados
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=test_size, random_state=42
        )
        
        # Treinar modelo
        if model_type == "Random Forest":
            model = RandomForestRegressor(n_estimators=100, random_state=42)
        else:
            model = LinearRegression()
        
        with st.spinner("Treinando modelo..."):
            model.fit(X_train, y_train)
        
        # Fazer predi√ß√µes
        y_pred_train = model.predict(X_train)
        y_pred_test = model.predict(X_test)
        
        # Avaliar modelo
        train_r2 = r2_score(y_train, y_pred_train)
        test_r2 = r2_score(y_test, y_pred_test)
        train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
        test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
        train_mae = mean_absolute_error(y_train, y_pred_train)
        test_mae = mean_absolute_error(y_test, y_pred_test)
        
        # Mostrar resultados
        st.success("‚úÖ Modelo treinado com sucesso!")
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("R¬≤ (Treino)", f"{train_r2:.3f}")
            st.metric("R¬≤ (Teste)", f"{test_r2:.3f}")
        
        with col2:
            st.metric("RMSE (Treino)", f"{train_rmse:.2f}")
            st.metric("RMSE (Teste)", f"{test_rmse:.2f}")
        
        with col3:
            st.metric("MAE (Treino)", f"{train_mae:.2f}")
            st.metric("MAE (Teste)", f"{test_mae:.2f}")
        
        # Gr√°ficos de avalia√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            # Scatter plot: Real vs Predito
            fig_scatter = go.Figure()
            fig_scatter.add_trace(go.Scatter(
                x=y_test, 
                y=y_pred_test,
                mode='markers',
                name='Teste',
                opacity=0.7
            ))
            fig_scatter.add_trace(go.Scatter(
                x=[y_test.min(), y_test.max()],
                y=[y_test.min(), y_test.max()],
                mode='lines',
                name='Linha Perfeita',
                line=dict(dash='dash', color='red')
            ))
            fig_scatter.update_layout(
                title="Real vs Predito",
                xaxis_title="Valor Real",
                yaxis_title="Valor Predito"
            )
            st.plotly_chart(fig_scatter, use_container_width=True)
        
        with col2:
            # Res√≠duos
            residuals = y_test - y_pred_test
            fig_residuals = px.scatter(
                x=y_pred_test,
                y=residuals,
                title="Gr√°fico de Res√≠duos",
                labels={'x': 'Valores Preditos', 'y': 'Res√≠duos'}
            )
            fig_residuals.add_hline(y=0, line_dash="dash", line_color="red")
            st.plotly_chart(fig_residuals, use_container_width=True)
        
        # Import√¢ncia das features (para Random Forest)
        if model_type == "Random Forest":
            st.subheader("üìä Import√¢ncia das Features")
            feature_importance = pd.DataFrame({
                'Feature': feature_vars,
                'Import√¢ncia': model.feature_importances_
            }).sort_values('Import√¢ncia', ascending=False)
            
            fig_importance = px.bar(
                feature_importance,
                x='Import√¢ncia',
                y='Feature',
                orientation='h',
                title="Import√¢ncia das Features"
            )
            st.plotly_chart(fig_importance, use_container_width=True)
        
        # Salvar modelo
        if st.button("üíæ Salvar Modelo"):
            models_dir = Path("models")
            models_dir.mkdir(exist_ok=True)
            
            model_filename = f"{model_type.lower().replace(' ', '_')}_{target_var}_{len(feature_vars)}features.pkl"
            model_path = models_dir / model_filename
            
            joblib.dump({
                'model': model,
                'target_var': target_var,
                'feature_vars': feature_vars,
                'model_type': model_type,
                'metrics': {
                    'train_r2': train_r2,
                    'test_r2': test_r2,
                    'train_rmse': train_rmse,
                    'test_rmse': test_rmse
                }
            }, model_path)
            
            st.success(f"‚úÖ Modelo salvo em: {model_path}")
    
    except Exception as e:
        st.error(f"‚ùå Erro ao treinar modelo: {e}")

def show_load_model(data):
    """Interface para carregar modelo existente"""
    st.subheader("üìÇ Carregar Modelo Existente")
    
    models_dir = Path("models")
    if not models_dir.exists():
        st.warning("Diret√≥rio 'models' n√£o encontrado")
        return
    
    model_files = list(models_dir.glob("*.pkl"))
    if not model_files:
        st.warning("Nenhum modelo encontrado no diret√≥rio")
        return
    
    selected_model = st.selectbox(
        "Selecione o modelo:",
        model_files,
        format_func=lambda x: x.name
    )
    
    if st.button("üìÅ Carregar Modelo"):
        try:
            model_data = joblib.load(selected_model)
            
            st.success("‚úÖ Modelo carregado com sucesso!")
            
            # Mostrar informa√ß√µes do modelo
            st.json({
                'Tipo': model_data['model_type'],
                'Target': model_data['target_var'],
                'Features': model_data['feature_vars'],
                'M√©tricas': model_data['metrics']
            })
            
            # Interface de predi√ß√£o
            st.subheader("üîÆ Fazer Predi√ß√µes")
            
            # Criar inputs para cada feature
            feature_values = {}
            for feature in model_data['feature_vars']:
                if feature in data.columns:
                    min_val = float(data[feature].min())
                    max_val = float(data[feature].max())
                    mean_val = float(data[feature].mean())
                    
                    feature_values[feature] = st.number_input(
                        f"{feature}:",
                        min_value=min_val,
                        max_value=max_val,
                        value=mean_val,
                        key=f"pred_{feature}"
                    )
            
            if st.button("üéØ Fazer Predi√ß√£o"):
                input_data = pd.DataFrame([feature_values])
                prediction = model_data['model'].predict(input_data)[0]
                
                st.success(f"üìä Predi√ß√£o: {prediction:.2f}")
        
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar modelo: {e}")

def show_compare_models(data):
    """Interface para comparar modelos"""
    st.subheader("‚öñÔ∏è Comparar Modelos")
    
    models_dir = Path("models")
    if not models_dir.exists() or not list(models_dir.glob("*.pkl")):
        st.warning("Nenhum modelo encontrado para compara√ß√£o")
        return
    
    model_files = list(models_dir.glob("*.pkl"))
    
    # Carregar m√©tricas de todos os modelos
    models_comparison = []
    
    for model_file in model_files:
        try:
            model_data = joblib.load(model_file)
            models_comparison.append({
                'Nome': model_file.name,
                'Tipo': model_data['model_type'],
                'Target': model_data['target_var'],
                'Features': len(model_data['feature_vars']),
                'R¬≤ Teste': model_data['metrics']['test_r2'],
                'RMSE Teste': model_data['metrics']['test_rmse']
            })
        except Exception as e:
            st.warning(f"Erro ao carregar {model_file.name}: {e}")
    
    if models_comparison:
        comparison_df = pd.DataFrame(models_comparison)
        st.dataframe(comparison_df, use_container_width=True)
        
        # Gr√°fico de compara√ß√£o
        fig_comparison = px.scatter(
            comparison_df,
            x='RMSE Teste',
            y='R¬≤ Teste',
            size='Features',
            color='Tipo',
            title="Compara√ß√£o de Modelos",
            hover_data=['Nome']
        )
        st.plotly_chart(fig_comparison, use_container_width=True)
    else:
        st.warning("Nenhum modelo v√°lido encontrado")